---------------------------------------------------------------------------------------------
--' funtions for upgerade items ----------------------------------------------------
--' Made by Distemper ----------------------------------------------------------------
--' 03.08 --------------------------------------------------------------------------------
	--' ôóíêöèÿ äîñòóïíîñòè àïãðåéäà
		--' function precondition_functor_a( param1, section )
	--' ôóíêöèÿ ïðèìåíåíèÿ àïãðåéäà (îòíèìàíèå äåíåã)
		--' function effect_functor_a( param2, section )
	--' ôóíêöèÿ îòîáðàæåíèÿ íóæíûõ ñäåäñòâ  äëÿ àïãðåéäà
		--' function prereq_functor_a( param3, section )
	--' ôóíêöèÿ âðåìåííî íå èñïîëüçóåòüñÿ
		--' function prereq_tooltip_functor_a( param3 )
		--' ôóíêöèè äëÿ îòîáðàæåíèÿ ñâîéñòâ àïãðåéäîâ
		--' function property_functor_a( param1, name )
		--' function property_functor_b( param1, name )
		--' function property_functor_c( param1, name )
		--' ôóíêöèÿ äëÿ îòîáðàæåíèÿ ñïåöèàëèçàöèè òåõíèêà
--------------------------------------------------------------------------------------------
cur_hint = nil
local issue_condlist = true
local mechanic_name = ""
local char_ini = ini_file("item_upgrades.ltx")
local param_ini = ini_file("misc\\stalkers_upgrade_info.ltx")
local cur_price_percent = 1

--------------------------------------------------------------------------------------------
-- Upgrade functions
--------------------------------------------------------------------------------------------

local setup_discounts = function()
	-- ������� ��������� ������ � ���.
	-- ������������ ������ ��� �����������.
	if IsGameTypeSingle() == false then
		abort("setup_discounts() is not supported in multiplayer")
	end
	if param_ini:line_exist(mechanic_name, "discount_condlist") then
		local condlist = param_ini:r_string(mechanic_name, "discount_condlist")
		local parsed = xr_logic.parse_condlist(db.actor, nil, nil, condlist)
		xr_logic.pick_section_from_condlist(db.actor, nil, parsed)
	end
end

function can_upgrade_item( item_name, mechanic )
	-- ������� ���������� � UI ��� �������� ����������� ��������.
	-- ������� ��������� �������� ��� ������������.
	if not IsGameTypeSingle() then
		return true
	end

	mechanic_name = mechanic
	setup_discounts()
	if param_ini:line_exist(mechanic, "he_upgrade_nothing") then
		return false
	end
	if not param_ini:line_exist(mechanic, item_name) then
		return false
	end
	return true
end

function how_much_upgrade( section )
	-- ������� ���������� ��������� ��������.
	-- ��� ������������ ���������� �� ������.
	return math.floor(char_ini:r_u32(section, "cost") * cur_price_percent)
end

function precondition_functor_a( param1, section )
	if(param_ini:line_exist(mechanic_name.."_upgr", section)) then
	-- ������� ���������� "�������" ������������� ��������.
	local actor = db.get_actor()
	if actor == nil then
		return str
	end

	if param_ini:line_exist(mechanic_name.."_upgr", section) then
		local param = param_ini:r_string(mechanic_name.."_upgr", section)
		if(param) then
			if(param=="false") then
		if param then
			if param=="false" then
				return 1
			elseif(param~="true") then
			elseif param~="true" then
				local possibility_table = xr_logic.parse_condlist(victim, mechanic_name.."_upgr", section, param)
				local possibility = xr_logic.pick_section_from_condlist(db.actor, victim, possibility_table)
				if not(possibility) or (possibility=="false") then
				local possibility = xr_logic.pick_section_from_condlist(actor, victim, possibility_table)
				if not possibility or possibility == "false" then
					return 2
				end
			end
		end
	end
	if(db.actor) then
		local price = math.floor(char_ini:r_u32(section, "cost")*cur_price_percent)
		local cash = db.actor:money()
		if(cash<price) then

	-- � ������������ ��������� ������� ����� ������ �� �������.
	-- �� ������� ��������� ��������� �������� � 
	-- game_sv_freemp::OnPlayerInstallUpgrade()
	if IsGameTypeSingle() or OnClient() then
		local price = how_much_upgrade(section)
		local cash = actor:money()
		if cash < price then
			return 2
		end
	end
	return 0
end

function effect_functor_a( param2, section, loading ) --( string, string, int )
	if loading == 0 then
		local money = char_ini:r_u32(section, "cost")
		db.actor:give_money(math.floor(money*-1*cur_price_percent))
	-- ������� ��������� ����� ��� ��������.
	-- ������������ ������ ��� �����������.
	if IsGameTypeSingle() == false then
		abort("effect_functor_a() is not supported in multiplayer")
	end
	if loading == 0 then
	 	db.actor:give_money(-1 * how_much_upgrade(section))
	 end
end

function get_upgrade_cost(section)
	if db.actor then
		local price = math.floor(char_ini:r_u32(section, "cost")*cur_price_percent)
				return game.translate_string("st_upgr_cost")..": "..price
	end
	return " "
	return game.translate_string("st_upgr_cost")..": "..tostring(how_much_upgrade(section))
end

function get_possibility_string(mechanic_name, possibility_table)
		local str = ""
	if(cur_hint) then
local get_possibility_string = function(mechanic_name, possibility_table)
	local str = ""
	if cur_hint then
		for k,v in pairs(cur_hint) do
			str = str.."\\n - "..game.translate_string(v)
		end
	end
	if(str=="") then
	if str == "" then
		str = " - add hints for this upgrade"
	end
	return str
end

function prereq_functor_a( param3, section )
	-- ������� ���������� � UI � ����� ��� ��������� �� �������.
	local str = ""
	if(param_ini:line_exist(mechanic_name.."_upgr", section)) then
	local actor = db.get_actor()
	if actor == nil then
		return str
	end
	if param_ini:line_exist(mechanic_name.."_upgr", section) then
		local param = param_ini:r_string(mechanic_name.."_upgr", section)
		if(param) then
			if(param=="false") then
		if param then
			if param == "false" then
				return str
			else
				cur_hint = nil
				local possibility_table = xr_logic.parse_condlist(victim, mechanic_name.."_upgr", section, param)
				local possibility = xr_logic.pick_section_from_condlist(db.actor, victim, possibility_table)
				if not(possibility) or (possibility=="false") then
				local possibility = xr_logic.pick_section_from_condlist(actor, victim, possibility_table)
				if not possibility or possibility == "false" then
					str = str..get_possibility_string(mechanic_name, possibility_table)
				end
			end
		end
	end
	if(db.actor) then
		local price = math.floor(char_ini:r_u32(section, "cost")*cur_price_percent)
		local cash = db.actor:money()
		if(cash<price) then

	if actor then
		local price = how_much_upgrade(section)
		local cash = actor:money()
		if cash < price then
			return str.."\\n - "..game.translate_string("st_upgr_enough_money")--.." "..price-cash.." RU"
		end
	end
	return str
end

--------------------------------------------------------------------------------------------
-- UNUSED upgrade functions
--------------------------------------------------------------------------------------------
function property_functor_a( param1, name )
	local prorerty_name = char_ini:r_string(name, "name")
	local t_prorerty_name = game.translate_string(prorerty_name)
@@ -162,10 +223,6 @@ function property_functor_c( param1, name )
	return issue_property( param1, name )
end

function need_victim(obj)
	victim = obj
end

function issue_property( param1, name )
	local prorerty_name = char_ini:r_string(name, "name")
	local t_prorerty_name = game.translate_string(prorerty_name)
@@ -182,7 +239,12 @@ function issue_property( param1, name )
	end
end

local function how_much_repair( item_name, item_condition )
--------------------------------------------------------------------------------------------
-- Repair functions
--------------------------------------------------------------------------------------------
function how_much_repair( item_name, item_condition )
	-- ������� ���������� ��������� �������.
	-- ��� ������������ ���������� �� ������.
	local ltx = system_ini()
	local cost = ltx:r_u32(item_name, "cost")
	local class = ltx:r_string(item_name, "class")
@@ -191,52 +253,56 @@ local function how_much_repair( item_name, item_condition )
end

function can_repair_item( item_name, item_condition, mechanic ) --( string, float, string )
	-- ������� ���������� � UI ��� �������� ����������� �������.
	local actor = db.get_actor()
	if actor == nil then
		return
	end
	if(item_name=="pri_a17_gauss_rifle") then
		return false
	end
	local price = how_much_repair( item_name, item_condition )
	if db.actor:money() < price then
	if actor:money() < price then
		return false
	end
	return true
end

function question_repair_item( item_name, item_condition, can, mechanic ) --( string, float, bool, string )
	-- ������� ���������� � UI � ���������� ����� ������������ ���� ��� �������.
	local actor = db.get_actor() -- local actor
	if actor == nil then
		return ""
	end

	if(item_name=="pri_a17_gauss_rifle") then
		return game.translate_string("st_gauss_cannot_be_repaired")
	end
	local price = how_much_repair( item_name, item_condition )
	if db.actor:money() < price then
		return game.translate_string("st_upgr_cost")..": "..price.." RU\\n"..game.translate_string("ui_inv_not_enought_money")..": "..price-db.actor:money().." RU"
	if actor:money() < price then
		return game.translate_string("st_upgr_cost")..": "..price.." RU\\n"..game.translate_string("ui_inv_not_enought_money")..": "..price-actor:money().." RU"
	end
	return game.translate_string("st_upgr_cost").." "..price.." RU. "..game.translate_string("ui_inv_repair").."?"
end

function effect_repair_item( item_name, item_condition )
	-- ������� ��������� ����� ��� �������.
	-- ������������ ������ ��� �����������.
	if IsGameTypeSingle() == false then
		abort("effect_repair_item() is not supported in multiplayer")
	end
	if mechanic_name ~= "kat_cs_commander" then
		local price = how_much_repair( item_name, item_condition )
		db.actor:give_money(-price)
	end
end

function can_upgrade_item( item_name, mechanic )
	mechanic_name = mechanic
	setup_discounts()
	if param_ini:line_exist(mechanic, "he_upgrade_nothing") then
		return false
	end
	if not param_ini:line_exist(mechanic, item_name) then
		return false
	end
	return true
end
--------------------------------------------------------------------------------------------
-- Other functions
--------------------------------------------------------------------------------------------

function setup_discounts()
		if param_ini:line_exist(mechanic_name, "discount_condlist") then
				local condlist = param_ini:r_string(mechanic_name, "discount_condlist")
		local parsed = xr_logic.parse_condlist(db.actor, nil, nil, condlist)
		xr_logic.pick_section_from_condlist(db.actor, nil, parsed)
	end
function need_victim(obj)
	victim = obj
end

function mech_discount(perc)
	cur_price_percent = perc
end